
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <string>

using namespace std;

//B1
struct SinhVien
{
    int id = 0;
    string name = "";
    double gpa = 0;
};

SinhVien Input_SV()
{
    SinhVien sv;
    cin >> sv.id;
    cin.ignore();
    getline(cin, sv.name);
    cin >> sv.gpa;
    return sv;
}

//B2
struct node
{
    SinhVien data;
    node* pNext = NULL;
};

//B2
struct List
{
    node* pHead;
    node* pTail;
};

//B3
node* CreateNode(SinhVien sinhvien)
{
    node* p = new node;

    if (p == NULL)  return NULL;

    p->data = sinhvien;
    p->pNext = NULL;

    return p;
}

void CreateList(List& l)
{
    l.pHead = l.pTail = NULL;
}

//B4
void AddHead(List& l, node* p)
{
    if (l.pHead == NULL)
    {
        l.pHead = l.pTail = p;
    }
    else
    {
        p->pNext = l.pHead;
        l.pHead = p;
    }
}

//B5
void AddTail(List& l, node* p)
{
    if (l.pHead == NULL)
    {
        l.pHead = l.pTail = p;
    }
    else
    {
        l.pTail->pNext = p;
        l.pTail = p;
    }
}

//B6
void InputList(List& l)
{
    do
    {
        int choice;
        cout << "Nhap sinh vien (1) / Ngung chuong trinh (0)\n";
        cin >> choice;
        if (choice == 0) break;
        else
        {
            if (choice == 1)
            {
                SinhVien sv = Input_SV();
                node* p = CreateNode(sv);
                AddTail(l, p);
            }
            else
            {
                cout << "Khong hop le!\nEnter de tiep tuc...";
                cin.get();
            }
        }       
    } while (true);
}

//B7
int check[10000];
void AutoInitalize(List& l)
{
    for (int i = 1000; i <= 9999; i++)
    {
        check[i] = 0;
    }
    srand((int)time(0));
    string Ho[] = { "Nguyen ", "Le ", "Tran ","Huynh ","Chau ", "Nguyen ", "Nguyen " };
    string TenDem[] = { "","Thi ","Hong ","Van ","Quoc ","Minh ", "" };
    string Ten[] = { "Tuan", "Tu", "Van", "Vu", "Khang", "Luan" };
    int ho, tendem, ten, soluong;
    soluong = 3 + (rand() % 5);
    for (int i = 1; i <= soluong; i++)
    {
        SinhVien rdSinhVien;
        ho = rand() % 7;
        tendem = rand() % 7;
        ten = rand() % 6;
        int id;
        do
        {
            id = 1000 + (rand() % 9000);
        } while (check[id] == 1);
        check[id] = 1;
        int igpa = 50 + (rand() % 351);
        double gpa = (double)igpa / 100.0;
        rdSinhVien.name = Ho[ho] + TenDem[tendem] + Ten[ten];
        rdSinhVien.gpa = gpa;
        rdSinhVien.id = id;
        AddTail(l, CreateNode(rdSinhVien));
    }
}

//B8
void ShowSv(SinhVien sv)
{
    cout << "----------------------" << endl;
    cout << "Ho va ten: " << sv.name << endl;
    cout << "ID: " << sv.id << endl;
    cout << "GPA: " << sv.gpa << endl;
}

void ShowList(List l)
{
    for (node* run = l.pHead; run != NULL; run = run->pNext)
    {
        ShowSv(run->data);
    }
    cout << endl;
}

//B9
node* SearchByID(List l, int ID)
{
    for (node* run = l.pHead; run != NULL; run = run->pNext)
    {
        if (run->data.id == ID) return run;
    }
    return NULL;
}

//B10
node* SearchByName(List l, string Name)
{
    for (node* run = l.pHead; run != NULL; run = run->pNext)
    {
        if (run->data.name == Name) return run;
    }
    return NULL;
}

//B11
node* SearchByGPA(List l, double GPA)
{
    for (node * run = l.pHead; run != NULL; run = run->pNext)
    {
        if (run->data.gpa == GPA) return run;
    }
    return NULL;
}

//B12
void sortListByGPA(List& l)
{
    for (node* i = l.pHead; i != NULL; i = i->pNext)
    {
        for (node* j = i->pNext; j != NULL; j = j->pNext)
        {
            if (i->data.gpa > j->data.gpa)
            {
                SinhVien sv = i->data;
                i->data = j->data;
                j->data = sv;
            }
        }
    }
}

node* SVWithHighestGPA(List l)
{
    sortListByGPA(l);
    return l.pTail;
}

//B13
node* SVWithLowestGPA(List l)
{
    sortListByGPA(l);
    return l.pHead;
}

//B14
void task14(List l)
{
    sortListByGPA(l);
    int count = 0;
    for (node* run = l.pHead; run != NULL; run = run->pNext)
    {
        count++;
    }
    if (count >= 10)
    {
        for (node* run = l.pHead; run != NULL; run = run->pNext)
        {
            ShowSv(run->data);
        }
    }
    else
    {
        cout << "So luong sinh vien khong du 10.";
    }
}

//B15
void DeleteByID(List& l, int ID)
{
    for (node* run = l.pHead; run->pNext != NULL; run = run->pNext)
    {
        if (run->pNext->data.id == ID)
        {
            node* p = run->pNext->pNext;
            delete run->pNext;
            run->pNext = p;
        }
    }
}

//B16
int main()
{
    List l;
    CreateList(l);
    do
    {

        cout << "============================================================================ \n";
        cout << "                                      MENU                                   \n";
        cout << "============================================================================ \n";
        cout << "0.  Ket thuc chuong trinh! \n";
        cout << "4.  Them sinh vien vao dau danh sach. \n";
        cout << "5.  Them sinh vien vao cuoi danh sach. \n";
        cout << "6.  Nhap danh sach sinh vien theo phuong phap thu cong. \n";
        cout << "7.  Khoi tao danh sach sinh vien theo phuong phap nhap tu dong. \n";
        cout << "8.  In ra danh sach sinh vien. \n";
        cout << "9.  Tim kiem sinh vien theo ID. \n";
        cout << "10. Tim kiem sinh vien theo ten. \n";
        cout << "11. Tim kiem sinh vien theo GPA. \n";
        cout << "12. Tim sinh vien co GPA cao nhat. \n";
        cout << "13. Tim sinh vien co GPA thap nhat. \n";
        cout << "14. Tim 10 sinh vien co GPA cao nhat. \n";
        cout << "15. Xoa sinh vien theo ID. \n";        
        cout << "============================================================================ \n";
        cout << "Lua chon cua ban: ";
        int choice;
        int id; string name; double gpa;
        SinhVien sv;
        cin >> choice;
        switch (choice)
        {
        case 0:
            cout << "Ket thuc!";
            return 0;
        case 4:
            sv = Input_SV();
            AddHead(l, CreateNode(sv));
            break;
        case 5:
            sv = Input_SV();
            AddTail(l, CreateNode(sv));
            break;
        case 6:
            InputList(l);
            break;
        case 7:
            AutoInitalize(l);
            ShowList(l);
            break;
        case 8:
            ShowList(l);
            break;
        case 9:
            cin >> id;
            ShowSv(SearchByID(l, id)->data);
            break;
        case 10:
            cin >> name;
            ShowSv(SearchByName(l, name)->data);
            break;
        case 11:
            cin >> gpa;
            ShowSv(SearchByGPA(l, gpa)->data);
            break;
        case 12:
            ShowSv(SVWithHighestGPA(l)->data);
            break;
        case 13:
            ShowSv(SVWithLowestGPA(l)->data);
            break;
        case 14:
            task14(l);
            break;
        case 15:
            cin >> id;
            DeleteByID(l, id);
            break;
        default:
            cout << "Lua chon khong hop le! \n";
            break;
        }
    } while (true);
    return 0;
}